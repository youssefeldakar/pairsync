#!/bin/sh

# Copyright (C) 2018-2020 Bibliotheca Alexandrina <www.bibalex.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if ! opts=$(getopt -q -o "" -l "pull,push,rootless,whole,existing" -- "$@"); then
  echo "Bad invocation" >&2
  exit 1
fi

eval set -- "$opts"

existing=""

while true; do
  case "$1" in
    --pull)
      pull=1
      ;;
    --push)
      push=1
      ;;
    --rootless)
      rootless=1
      ;;
    --whole)
      whole=1
      ;;
    --existing)
      existing="--existing"
      ;;
    --help)
      usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
  esac
  shift
done

# Implicit pull/push
case $(basename "$0") in *pull) pull=1 ;; *push) push=1 ;; esac

if [ -n "$pull" ] && [ -n "$push" ]; then
  echo "Pull/push selected together" >&2
  exit 1
fi

if [ -z "$pull" ] && [ -z "$push" ]; then
  echo "Pull/push not specified" >&2
  exit 1
fi

if [ -n "$rootless" ] && [ -n "$whole" ]; then
  echo "Pick either rootless or whole" >&2
  exit 1
fi

f=$(readlink -f "$PWD")

if [ "$f" = / ]; then
  f=
fi

i="$f"
while [ -n "$i" ]; do
  j="$i/.pairsync.remote"

  if [ -e "$j" ]; then
    r=$(cat "$j")
    s=$(echo "$f" | cut -c$((${#i}+1))-)
    break
  fi

  i=$(echo "$i" | sed 's,/[^/]*$,,')

  # Default to whole for partial tree sync unless explicitly rootless
  if [ -z "$rootless" ]; then
    whole=1
  fi
done

if [ -z "$r" ]; then
  echo "Remote not found" >&2
  exit 1
fi

if [ -e "$f/.pairsync.includes" ]; then
  incl="$f/.pairsync.includes"
  excl="/*"
fi

# - Wildcard in source path avoids assuming top dir is writable.
# - Wildcard is processed by shell in push from local.
# - Wildcard is processed by rsync in pull from remote.
# - Push to /afs is very slow with -g (implied by -a) for some reason.

if [ -n "$push" ]; then
  if [ -n "$whole" ]; then
    rsync -a $existing --no-g --no-o --delete --include-from="$incl" --exclude="$excl" "$f"/  "$r$s"/
  else
    rsync -a $existing --no-g --no-o --delete --include-from="$incl" --exclude="$excl" "$f"/* "$r$s"/
  fi
else
  if [ -n "$whole" ]; then
    rsync -a $existing --no-g --no-o --delete --include-from="$incl" --exclude="$excl" "$r$s/"  "$f"/
  else
    rsync -a $existing --no-g --no-o --delete --include-from="$incl" --exclude="$excl" "$r$s/*" "$f"/
  fi
fi
